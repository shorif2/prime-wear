---
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import LocationSelector from "@/components/LocationSelector";
import ShippingLocationSelector from "@/components/ShippingLocationSelector";
import { getCities, processOrder } from "@/lib/cart/server";
import Layout from "../layouts/Layout.astro";
import type { LocationData } from "@/lib/interface";
import type { ShippingMethod, CheckoutLanguageData } from "@/lib/interface";
import { getShippingMethods } from "@/lib/apiRequest/shipping";
import { getActiveCheckoutLanguage } from "@/lib/apiRequest/settings";

// Get cities using the server function which now calls the API
const cities: LocationData[] = await getCities();

// Fetch shipping methods
const shippingMethodsResponse = await getShippingMethods();
const shippingMethods: ShippingMethod[] = shippingMethodsResponse || [];

// Fetch checkout language data
const checkoutLanguageResponse = await getActiveCheckoutLanguage();
const lang: CheckoutLanguageData = checkoutLanguageResponse || {
  id: "fallback",
  name: "English (Fallback)",
  code: "en",
  languageData: {
    pageTitle: "Cart & Checkout",
    checkoutSectionTitle: "Checkout Information",
    cartSectionTitle: "Shopping Cart",
    customerNameLabel: "Full Name",
    customerNamePlaceholder: "Enter your full name",
    customerPhoneLabel: "Phone Number",
    customerPhonePlaceholder: "01XXXXXXXXX",
    customerPhoneHelp: "Example: 01712345678",
    customerEmailLabel: "Email (Optional)",
    customerEmailPlaceholder: "Enter your email address",
    shippingAddressLabel: "Delivery Address",
    shippingAddressPlaceholder: "Enter your full delivery address",
    cityLabel: "City",
    zoneLabel: "Zone",
    areaLabel: "Area (Optional)",
    shippingMethodLabel: "Choose Delivery Option",
    orderNotesLabel: "Order Notes (Optional)",
    orderNotesPlaceholder: "Any special instructions for your order?",
    continueShoppingText: "Continue Shopping",
    subtotalText: "Subtotal",
    shippingText: "Shipping",
    discountText: "Discount",
    totalText: "Total",
    discountCodePlaceholder: "Discount code",
    applyDiscountText: "Apply",
    removeDiscountText: "Remove",
    placeOrderText: "Place Order",
    processingText: "Processing...",
    emptyCartText: "Your cart is empty",
    termsText:
      "By placing this order, you agree to our Terms of Service and Privacy Policy",
    processingOrderTitle: "Processing Your Order",
    processingOrderMessage: "Please wait while we process your order.",
    requiredFieldIndicator: "*",
  },
  fieldVisibility: {
    showEmailField: true,
    showOrderNotesField: true,
    showAreaField: true,
  },
  isActive: true,
  isDefault: true,
};

// Initialize error message and success state
let errorMessage = "";
let successOrderId = "";
let isProcessing = false;

// Handle form submission
if (Astro.request.method === "POST") {
  try {
    isProcessing = true;
    const formData = await Astro.request.formData();

    // Check if cart is empty
    const cartItems = formData.get("cartItems") as string;
    if (!cartItems || cartItems === "{}" || cartItems === "[]") {
      throw new Error(
        "Your cart is empty. Please add items to your cart before placing an order.",
      );
    }

    const result = await processOrder(formData);

    if (result.success && result.orderId) {
      successOrderId = result.orderId;
      return Astro.redirect(`/order-success?orderId=${result.orderId}`);
    } else {
      console.error("Order processing failed:", result.error);
      errorMessage =
        result.error?.message || "Failed to process order. Please try again.";
    }
  } catch (error) {
    console.error("Order creation failed:", error);
    errorMessage =
      error instanceof Error ? error.message : "An unexpected error occurred";
  } finally {
    isProcessing = false;
  }
}
---

<Layout title={lang.languageData.pageTitle}>
  <main
    class="container max-w-7xl mx-auto px-4 md:px-6 lg:px-8 min-h-[calc(100vh-100px)]"
  >
    {
      errorMessage && (
        <div
          class="bg-red-100 border border-red-400 text-red-700 px-3 py-2 sm:px-4 sm:py-3 rounded mb-2 sm:mb-2.5 relative text-xs "
          role="alert"
        >
          <strong class="font-bold">Error: </strong>
          <span class="block sm:inline">{errorMessage}</span>
        </div>
      )
    }

    {
      successOrderId && (
        <div
          class="bg-green-100 border border-green-400 text-green-700 px-3 py-2 sm:px-4 sm:py-3 rounded mb-2 sm:mb-2.5 relative text-xs "
          role="alert"
        >
          <strong class="font-bold">Success! </strong>
          <span class="block sm:inline">
            Your order has been placed successfully. Order ID: {successOrderId}
          </span>
        </div>
      )
    }

    <div class="flex flex-col lg:flex-row gap-4 lg:gap-6">
      <!-- Cart Items Section - Now top on mobile, right on desktop -->
      <div
        class="w-full lg:w-2/5 lg:sticky lg:top-2.5 lg:self-start order-1 lg:order-2"
      >
        <div class="bg-gray-50 rounded-lg p-2 md:p-4 lg:p-6 space-y-1.5">
          <div class="flex items-center justify-between">
            <h2 class="text-base sm:text-lg font-bold">
              {lang.languageData.cartSectionTitle}
            </h2>
            <a href="/" class="text-xs text-gray-600 hover:text-black">
              {lang.languageData.continueShoppingText}
            </a>
          </div>

          <div class="divide-y" id="cartItems">
            <!-- Cart items will be rendered here by JavaScript -->
          </div>

          <div class="space-y-0.5 pt-1.5 sm:pt-2 border-t">
            <div class="flex justify-between text-xs">
              <span>{lang.languageData.subtotalText}</span>
              <span id="subtotal">৳0</span>
            </div>
            <div class="flex justify-between text-xs">
              <span>{lang.languageData.shippingText}</span>
              <span id="shippingCost">৳0</span>
            </div>
            <div
              class="flex justify-between text-xs text-green-600"
              id="discountRow"
            >
              <span
                >{lang.languageData.discountText} (<span
                  id="appliedDiscountCode"></span>)</span
              >
              <span id="discountAmount">-৳0</span>
            </div>
            <div class="flex justify-between font-bold text-base sm:text-lg">
              <span>{lang.languageData.totalText}</span>
              <span id="total">৳0</span>
            </div>

            <!-- Discount Code Form -->
            <div class="mt-2 sm:mt-3 pt-2 sm:pt-3 border-t">
              <form id="discountForm" class="space-y-1 sm:space-y-1.5">
                <div class="flex space-x-1 sm:space-x-1.5">
                  <input
                    type="text"
                    id="discountCodeInput"
                    placeholder={lang.languageData.discountCodePlaceholder}
                    class="flex-1 px-2 py-1 sm:px-2.5 sm:py-1.5 border border-gray-300 rounded-md text-xs focus:outline-none focus:ring-1 focus:ring-black h-8 sm:h-9"
                  />
                  <button
                    type="submit"
                    id="applyDiscountBtn"
                    class="px-2 py-1 sm:px-2.5 sm:py-1.5 bg-black text-white text-xs font-medium rounded-md hover:bg-gray-800 h-8 sm:h-9"
                  >
                    {lang.languageData.applyDiscountText}
                  </button>
                  <button
                    type="button"
                    id="removeDiscountBtn"
                    onclick="window.removeDiscountCode()"
                    class="px-2 py-1 sm:px-2.5 sm:py-1.5 bg-red-600 text-white text-xs font-medium rounded-md hover:bg-red-700 h-8 sm:h-9"
                    style="display: none;"
                  >
                    {lang.languageData.removeDiscountText}
                  </button>
                </div>
                <div
                  id="discountMessage"
                  class="text-red-600 text-sm mt-1"
                  style="display: none;"
                >
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Checkout Form Section - Now bottom on mobile, left on desktop -->
      <div class="w-full lg:w-3/5 order-2 lg:order-1">
        <div class="bg-gray-50 rounded-lg p-2 md:p-4 lg:p-6 relative">
          <h2 class="text-base text-md font-bold mb-2 sm:mb-2.5">
            {lang.languageData.checkoutSectionTitle}
          </h2>

          <form method="POST" class="space-y-4" id="checkoutForm">
            <input type="hidden" name="cartItems" id="cartItemsInput" />
            <input
              type="hidden"
              name="discountCodeHidden"
              id="discountCodeHidden"
            />

            <div class="grid gap-2 sm:grid-cols-2">
              <div>
                <Label
                  htmlFor="customerName"
                  className="mb-1 block text-xs  font-medium"
                >
                  {lang.languageData.customerNameLabel}
                  {lang.languageData.requiredFieldIndicator}
                </Label>
                <Input
                  type="text"
                  id="customerName"
                  name="customerName"
                  required
                  placeholder={lang.languageData.customerNamePlaceholder}
                  className="w-full border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 text-xs  px-2 py-1 sm:px-2.5 sm:py-1.5 h-8 sm:h-9"
                />
              </div>

              <div>
                <Label
                  htmlFor="customerPhone"
                  className="mb-1 block text-xs  font-medium"
                >
                  {lang.languageData.customerPhoneLabel}
                  {lang.languageData.requiredFieldIndicator}
                </Label>
                <Input
                  type="tel"
                  id="customerPhone"
                  name="customerPhone"
                  required
                  placeholder={lang.languageData.customerPhonePlaceholder}
                  className="w-full border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 text-xs  px-2 py-1 sm:px-2.5 sm:py-1.5 h-8 sm:h-9"
                />
                <p class="text-xs text-gray-500 mt-0.5">
                  {lang.languageData.customerPhoneHelp}
                </p>
              </div>

              {
                lang.fieldVisibility.showEmailField && (
                  <div class="sm:col-span-2">
                    <Label
                      htmlFor="customerEmail"
                      className="mb-1 block text-xs  font-medium"
                    >
                      {lang.languageData.customerEmailLabel}
                    </Label>
                    <Input
                      type="email"
                      id="customerEmail"
                      name="customerEmail"
                      placeholder={lang.languageData.customerEmailPlaceholder}
                      className="w-full border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 text-xs  px-2 py-1 sm:px-2.5 sm:py-1.5 h-8 sm:h-9"
                    />
                  </div>
                )
              }

              <div class="sm:col-span-2">
                <Label
                  htmlFor="shippingAddress"
                  className="mb-1 block text-xs  font-medium"
                >
                  {lang.languageData.shippingAddressLabel}
                  {lang.languageData.requiredFieldIndicator}
                </Label>
                <Textarea
                  id="shippingAddress"
                  name="shippingAddress"
                  required
                  placeholder={lang.languageData.shippingAddressPlaceholder}
                  rows={2}
                  className="w-full resize-none border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 text-xs  px-2 py-1 sm:px-2.5 sm:py-1.5 min-h-[4rem] sm:min-h-[4.5rem]"
                />
              </div>

              <div class="sm:col-span-2">
                <ShippingLocationSelector
                  client:load
                  shippingMethods={shippingMethods}
                  shippingMethodLabel={lang.languageData.shippingMethodLabel}
                />
              </div>

              <div class="sm:col-span-2 z-40">
                <LocationSelector
                  client:load
                  cities={cities}
                  cityLabel={lang.languageData.cityLabel}
                  zoneLabel={lang.languageData.zoneLabel}
                  areaLabel={lang.languageData.areaLabel}
                  showAreaField={lang.fieldVisibility.showAreaField}
                />
              </div>

              {
                lang.fieldVisibility.showOrderNotesField && (
                  <div class="sm:col-span-2">
                    <Label
                      htmlFor="notes"
                      className="mb-1 block text-xs  font-medium"
                    >
                      {lang.languageData.orderNotesLabel}
                    </Label>
                    <Textarea
                      id="notes"
                      name="notes"
                      placeholder={lang.languageData.orderNotesPlaceholder}
                      rows={2}
                      className="w-full resize-none border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 text-xs  px-2 py-1 sm:px-2.5 sm:py-1.5 min-h-[4rem] sm:min-h-[4.5rem]"
                    />
                  </div>
                )
              }
            </div>

            <div class="pt-1 sm:pt-1.5">
              <Button
                type="submit"
                className="w-full bg-black text-white font-bold py-1.5 sm:py-2 rounded-md shadow-sm hover:bg-gray-800 transition-all duration-200 text-sm h-9 sm:h-10"
                id="submitButton"
                disabled={isProcessing}
              >
                {
                  isProcessing
                    ? lang.languageData.processingText
                    : lang.languageData.placeOrderText
                }
              </Button>

              <p class="text-xs text-gray-500 text-center mt-1.5 sm:mt-2">
                {lang.languageData.termsText}
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  </main>
</Layout>

<!-- Loading overlay - will be shown via JavaScript -->
<div
  id="loadingOverlay"
  style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.8); z-index: 99999; backdrop-filter: blur(4px);"
>
  <div
    style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; text-align: center; width: 280px; box-shadow: 0 4px 10px rgba(0,0,0,0.2);"
  >
    <div
      style="margin: 0 auto 15px; width: 48px; height: 48px; border: 4px solid #f3f3f3; border-top: 4px solid #000; border-radius: 50%; animation: spin 1s linear infinite;"
    >
    </div>
    <h3 style="margin: 0 0 8px; font-size: 16px; font-weight: bold;">
      {lang.languageData.processingOrderTitle}
    </h3>
    <p style="margin: 0 0 12px; font-size: 13px; color: #666;">
      {lang.languageData.processingOrderMessage}
    </p>
    <div
      style="width: 100%; height: 5px; background: #f3f3f3; border-radius: 2.5px; overflow: hidden;"
    >
      <div
        id="loadingProgressBar"
        style="width: 0%; height: 100%; background: #000; transition: width 0.5s;"
      >
      </div>
    </div>
  </div>
</div>

<script>
  import { initCartFunctionality } from "@/lib/cart/client";

  // Initialize cart functionality
  initCartFunctionality();

  // Add form submission validation
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("checkoutForm") as HTMLFormElement;
    const submitButton = document.getElementById(
      "submitButton",
    ) as HTMLButtonElement;
    const loadingOverlay = document.getElementById(
      "loadingOverlay",
    ) as HTMLElement;
    const progressBar = document.getElementById(
      "loadingProgressBar",
    ) as HTMLElement;

    // Function to check if cart is empty
    const isCartEmpty = () => {
      const cartItemsInput = document.getElementById(
        "cartItemsInput",
      ) as HTMLInputElement;

      return (
        !cartItemsInput ||
        !cartItemsInput.value ||
        cartItemsInput.value === "{}" ||
        cartItemsInput.value === "[]"
      );
    };

    // Disable submit button if cart is empty
    const updateCheckoutButtonState = () => {
      if (submitButton) {
        const empty = isCartEmpty();
        submitButton.disabled = empty;
        submitButton.title = empty
          ? "Your cart is empty. Please add items to your cart before placing an order."
          : "";

        if (empty) {
          submitButton.classList.add("opacity-50", "cursor-not-allowed");
        } else {
          submitButton.classList.remove("opacity-50", "cursor-not-allowed");
        }
      }
    };

    // Update button state on page load and when cart changes
    updateCheckoutButtonState();
    window.addEventListener("cart-updated", updateCheckoutButtonState);

    if (form && submitButton && loadingOverlay && progressBar) {
      form.addEventListener("submit", (e) => {
        // Check if cart is empty
        if (isCartEmpty()) {
          e.preventDefault();
          alert(
            "Your cart is empty. Please add items to your cart before placing an order.",
          );
          return false;
        }

        // Check required fields
        const requiredFields = [
          "customerName",
          "customerPhone",
          "shippingAddress",
          "shippingLocation",
          "city",
          "zone",
        ];

        let missingFields = [];
        for (const field of requiredFields) {
          const element = document.querySelector(`[name="${field}"]`) as
            | HTMLInputElement
            | HTMLTextAreaElement
            | null;
          if (!element || !element.value) {
            missingFields.push(field);
          }
        }

        if (missingFields.length > 0) {
          e.preventDefault();
          alert(
            `Please fill in all required fields: ${missingFields.join(", ")}`,
          );
          return false;
        }

        // Show loading state
        submitButton.disabled = true;
        submitButton.textContent = "Processing...";

        // Show loading overlay
        loadingOverlay.style.display = "block";
        document.body.style.overflow = "hidden"; // Prevent scrolling

        // Scroll to top to ensure overlay is visible
        window.scrollTo(0, 0);

        // Animate progress bar
        progressBar.style.width = "0%";
        setTimeout(() => {
          progressBar.style.width = "30%";
        }, 300);
        setTimeout(() => {
          progressBar.style.width = "60%";
        }, 1000);
        setTimeout(() => {
          progressBar.style.width = "80%";
        }, 2000);

        // Form will submit normally
        return true;
      });
    }
  });

  function setupPiiCapture() {
    const phoneInput = document.getElementById(
      "customerPhone",
    ) as HTMLInputElement;
    const emailInput = document.getElementById(
      "customerEmail",
    ) as HTMLInputElement;

    const saveToSession = (key: string, value: string) => {
      if (!value || !value.trim()) {
        sessionStorage.removeItem(key);
        return;
      }
      try {
        sessionStorage.setItem(key, value.trim());
      } catch (e) {
        console.warn(`Could not save to sessionStorage:`, e);
      }
    };

    if (phoneInput) {
      phoneInput.addEventListener("change", () => {
        saveToSession("scalius_user_phone", phoneInput.value);
      });
    }

    if (emailInput) {
      emailInput.addEventListener("change", () => {
        saveToSession("scalius_user_email", emailInput.value);
      });
    }

    // Pre-populate fields if data already exists in session
    const savedPhone = sessionStorage.getItem("scalius_user_phone");
    if (savedPhone && phoneInput) phoneInput.value = savedPhone;

    const savedEmail = sessionStorage.getItem("scalius_user_email");
    if (savedEmail && emailInput) emailInput.value = savedEmail;
  }

  document.addEventListener("DOMContentLoaded", setupPiiCapture);
  document.addEventListener("astro:page-load", setupPiiCapture);
</script>

<style>
  /* Custom scrollbar */
  * {
    scrollbar-width: thin;
    scrollbar-color: #e5e7eb transparent;
  }

  ::-webkit-scrollbar {
    width: 6px;
  }

  ::-webkit-scrollbar-track {
    background: transparent;
  }

  ::-webkit-scrollbar-thumb {
    background-color: #e5e7eb;
    border-radius: 3px;
  }

  /* Prevent layout shifts */
  /* form {
    contain: content;
  } */

  /* Ensure proper stacking for dropdowns */
  .space-y-2 > div,
  .space-y-2\.5 > div {
    position: relative;
  }

  /* Improve form field accessibility */
  input:focus,
  textarea:focus,
  button:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Loading animation */
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .container {
      padding-left: 8px; /* Further reduced for mobile */
      padding-right: 8px; /* Further reduced for mobile */
    }
    .text-lg {
      /* Compact large text on mobile */
      font-size: 1rem; /* Equivalent to text-base */
    }
    .text-xl {
      /* Compact XL text on mobile */
      font-size: 1.125rem; /* Equivalent to text-lg */
    }
    .py-3 {
      /* Compact button padding */
      padding-top: 0.5rem; /* py-2, adjusted from py-2.5 */
      padding-bottom: 0.5rem;
    }
    .px-4 {
      /* Compact general padding */
      padding-left: 0.75rem; /* px-3 */
      padding-right: 0.75rem;
    }
    /* Make form inputs and buttons slightly more compact on mobile */
    .h-9 {
      /* Target specific height */
      height: 2rem; /* h-8 */
    }
    .h-10 {
      /* Target specific height */
      height: 2.25rem; /* h-9 */
    }
    .px-2\.5 {
      /* Target specific padding */
      padding-left: 0.5rem; /* px-2 */
      padding-right: 0.5rem; /* px-2 */
    }
    .py-1\.5 {
      /* Target specific padding */
      padding-top: 0.25rem; /* py-1 */
      padding-bottom: 0.25rem; /* py-1 */
    }
    .min-h-\[4\.5rem\] {
      /* Target specific min-height */
      min-height: 3.5rem;
    }
    .min-h-\[4rem\] {
      /* Target specific min-height */
      min-height: 3rem;
    }
    /* Ensure overlay/modal fits on mobile */
    #loadingOverlay > div {
      width: 90vw !important;
      min-width: 0 !important;
      max-width: 98vw !important;
      padding: 12px !important;
    }
  }
</style>
